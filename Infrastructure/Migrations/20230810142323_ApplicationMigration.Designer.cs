// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230810142323_ApplicationMigration")]
    partial class ApplicationMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ApplicationStatusId")
                        .HasColumnType("int");

                    b.Property<int>("BorrowerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("ExcelFileData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FinancingPurposeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("RequestedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RequestedTenor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("BorrowerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Application");
                });

            modelBuilder.Entity("Domain.Entities.ApplicationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ApplicationStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2023, 8, 10, 16, 23, 23, 130, DateTimeKind.Local).AddTicks(5896),
                            Name = "In Charge",
                            Updated = new DateTime(2023, 8, 10, 16, 23, 23, 130, DateTimeKind.Local).AddTicks(5898)
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2023, 8, 10, 16, 23, 23, 130, DateTimeKind.Local).AddTicks(5900),
                            Name = "Loan Issued",
                            Updated = new DateTime(2023, 8, 10, 16, 23, 23, 130, DateTimeKind.Local).AddTicks(5902)
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2023, 8, 10, 16, 23, 23, 130, DateTimeKind.Local).AddTicks(5904),
                            Name = "Loan Canceled",
                            Updated = new DateTime(2023, 8, 10, 16, 23, 23, 130, DateTimeKind.Local).AddTicks(5905)
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2023, 8, 10, 16, 23, 23, 130, DateTimeKind.Local).AddTicks(5907),
                            Name = "Loan Defaulted",
                            Updated = new DateTime(2023, 8, 10, 16, 23, 23, 130, DateTimeKind.Local).AddTicks(5908)
                        },
                        new
                        {
                            Id = 5,
                            Created = new DateTime(2023, 8, 10, 16, 23, 23, 130, DateTimeKind.Local).AddTicks(5910),
                            Name = "Loan Disbursed",
                            Updated = new DateTime(2023, 8, 10, 16, 23, 23, 130, DateTimeKind.Local).AddTicks(5912)
                        },
                        new
                        {
                            Id = 6,
                            Created = new DateTime(2023, 8, 10, 16, 23, 23, 130, DateTimeKind.Local).AddTicks(5914),
                            Name = "Loan Guaranteed",
                            Updated = new DateTime(2023, 8, 10, 16, 23, 23, 130, DateTimeKind.Local).AddTicks(5915)
                        },
                        new
                        {
                            Id = 7,
                            Created = new DateTime(2023, 8, 10, 16, 23, 23, 130, DateTimeKind.Local).AddTicks(5917),
                            Name = "Loan Rejected",
                            Updated = new DateTime(2023, 8, 10, 16, 23, 23, 130, DateTimeKind.Local).AddTicks(5919)
                        },
                        new
                        {
                            Id = 8,
                            Created = new DateTime(2023, 8, 10, 16, 23, 23, 130, DateTimeKind.Local).AddTicks(5921),
                            Name = "Loan Repaid",
                            Updated = new DateTime(2023, 8, 10, 16, 23, 23, 130, DateTimeKind.Local).AddTicks(5922)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Borrower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("FiscalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VatNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyTypeId");

                    b.HasIndex("UserId");

                    b.HasIndex("FiscalCode", "UserId")
                        .IsUnique();

                    b.ToTable("Borrowers");
                });

            modelBuilder.Entity("Domain.Entities.CompanyProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalIndustry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sector")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubSector")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CompanyProfiles");
                });

            modelBuilder.Entity("Domain.Entities.CompanyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Company_Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CompanyTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Company_Type = "Sole proprietorship (S.I.)",
                            DateCreated = new DateTime(2023, 8, 10, 16, 23, 23, 130, DateTimeKind.Local).AddTicks(5713)
                        },
                        new
                        {
                            Id = 2,
                            Company_Type = "Other",
                            DateCreated = new DateTime(2023, 8, 10, 16, 23, 23, 130, DateTimeKind.Local).AddTicks(5761)
                        },
                        new
                        {
                            Id = 3,
                            Company_Type = "Partnership limited by shares (p.l.sh.)",
                            DateCreated = new DateTime(2023, 8, 10, 16, 23, 23, 130, DateTimeKind.Local).AddTicks(5763)
                        },
                        new
                        {
                            Id = 4,
                            Company_Type = "Limited partnership (l.p.)",
                            DateCreated = new DateTime(2023, 8, 10, 16, 23, 23, 130, DateTimeKind.Local).AddTicks(5765)
                        },
                        new
                        {
                            Id = 5,
                            Company_Type = "Cooperative Society (c.s.)",
                            DateCreated = new DateTime(2023, 8, 10, 16, 23, 23, 130, DateTimeKind.Local).AddTicks(5767)
                        },
                        new
                        {
                            Id = 6,
                            Company_Type = "General partnership (g.p.)",
                            DateCreated = new DateTime(2023, 8, 10, 16, 23, 23, 130, DateTimeKind.Local).AddTicks(5769)
                        });
                });

            modelBuilder.Entity("Domain.Entities.LoanStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("LoanStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2023, 8, 10, 16, 23, 23, 130, DateTimeKind.Local).AddTicks(5940),
                            Name = "Created",
                            Updated = new DateTime(2023, 8, 10, 16, 23, 23, 130, DateTimeKind.Local).AddTicks(5942)
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2023, 8, 10, 16, 23, 23, 130, DateTimeKind.Local).AddTicks(5944),
                            Name = "Accepted",
                            Updated = new DateTime(2023, 8, 10, 16, 23, 23, 130, DateTimeKind.Local).AddTicks(5945)
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2023, 8, 10, 16, 23, 23, 130, DateTimeKind.Local).AddTicks(5947),
                            Name = "Rejected",
                            Updated = new DateTime(2023, 8, 10, 16, 23, 23, 130, DateTimeKind.Local).AddTicks(5949)
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2023, 8, 10, 16, 23, 23, 130, DateTimeKind.Local).AddTicks(5951),
                            Name = "Disbursed",
                            Updated = new DateTime(2023, 8, 10, 16, 23, 23, 130, DateTimeKind.Local).AddTicks(5952)
                        },
                        new
                        {
                            Id = 5,
                            Created = new DateTime(2023, 8, 10, 16, 23, 23, 130, DateTimeKind.Local).AddTicks(5954),
                            Name = "Current",
                            Updated = new DateTime(2023, 8, 10, 16, 23, 23, 130, DateTimeKind.Local).AddTicks(5956)
                        },
                        new
                        {
                            Id = 6,
                            Created = new DateTime(2023, 8, 10, 16, 23, 23, 130, DateTimeKind.Local).AddTicks(5958),
                            Name = "In Arrears",
                            Updated = new DateTime(2023, 8, 10, 16, 23, 23, 130, DateTimeKind.Local).AddTicks(5959)
                        },
                        new
                        {
                            Id = 7,
                            Created = new DateTime(2023, 8, 10, 16, 23, 23, 130, DateTimeKind.Local).AddTicks(5961),
                            Name = "Defaulted",
                            Updated = new DateTime(2023, 8, 10, 16, 23, 23, 130, DateTimeKind.Local).AddTicks(5962)
                        },
                        new
                        {
                            Id = 8,
                            Created = new DateTime(2023, 8, 10, 16, 23, 23, 130, DateTimeKind.Local).AddTicks(5964),
                            Name = "Repaid",
                            Updated = new DateTime(2023, 8, 10, 16, 23, 23, 130, DateTimeKind.Local).AddTicks(5966)
                        },
                        new
                        {
                            Id = 9,
                            Created = new DateTime(2023, 8, 10, 16, 23, 23, 130, DateTimeKind.Local).AddTicks(5968),
                            Name = "Guaranteed",
                            Updated = new DateTime(2023, 8, 10, 16, 23, 23, 130, DateTimeKind.Local).AddTicks(5969)
                        },
                        new
                        {
                            Id = 10,
                            Created = new DateTime(2023, 8, 10, 16, 23, 23, 130, DateTimeKind.Local).AddTicks(5971),
                            Name = "Erased",
                            Updated = new DateTime(2023, 8, 10, 16, 23, 23, 130, DateTimeKind.Local).AddTicks(5973)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Domain.Entities.Prefix", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country_Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "code");

                    b.Property<string>("Country_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("Country_Prefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "prefix");

                    b.HasKey("Id");

                    b.ToTable("Prefixes");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Max_Financed_Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Min_Financed_Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Refernce_rate")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Installments with pre-amortization at a fixed rate",
                            Max_Financed_Amount = 200000000m,
                            Min_Financed_Amount = 1000000m,
                            Name = "Installments with pre-amortization at a fixed rate",
                            Refernce_rate = 0.0025000000000000001
                        },
                        new
                        {
                            Id = 2,
                            Description = "Installment with variable rate pre-amortization",
                            Max_Financed_Amount = 100000000m,
                            Min_Financed_Amount = 1000000m,
                            Name = "Installment with variable rate pre-amortization",
                            Refernce_rate = 0.029999999999999999
                        });
                });

            modelBuilder.Entity("Domain.Entities.RolePermission", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccesToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AccesTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BlockEnd")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordRecoveyToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PasswordRecoveyTokenCreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("PrefixId")
                        .HasColumnType("int");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TokenCreationTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PrefixId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c849cab5-efd3-4c8a-9a92-9739dfb4891f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8f779a72-7b12-49f1-82ea-10c8a44ed060",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            FailedLoginAttempts = 0,
                            FirstName = "admin",
                            IsBlocked = false,
                            LastName = "admin",
                            LockoutEnabled = false,
                            PasswordRecoveyTokenCreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumberConfirmed = false,
                            PrefixId = 1,
                            SecurityStamp = "c27a5697-55bc-4a75-af59-1ed56adb96f9",
                            TokenCreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "admin1"
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserPermission", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("UserPermissions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ac6ac3a5-7b9a-4f99-9ab5-55315affd01d",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "936b3459-6008-481c-93fd-27ebc821fc69",
                            Name = "Loan Officer",
                            NormalizedName = "LOAN OFFICER"
                        },
                        new
                        {
                            Id = "f9e83fd9-9172-4d9a-a0cc-32f40f9705a0",
                            Name = "Borrower",
                            NormalizedName = "BORROWER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Application", b =>
                {
                    b.HasOne("Domain.Entities.ApplicationStatus", "ApplicationStatus")
                        .WithMany("Applications")
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Borrower", "Borrower")
                        .WithMany("Applications")
                        .HasForeignKey("BorrowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany("Applications")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationStatus");

                    b.Navigation("Borrower");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.Borrower", b =>
                {
                    b.HasOne("Domain.Entities.CompanyType", "CompanyType")
                        .WithMany()
                        .HasForeignKey("CompanyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Borrowers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("Domain.Entities.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.Prefix", "Prefix")
                        .WithMany()
                        .HasForeignKey("PrefixId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prefix");
                });

            modelBuilder.Entity("Domain.Entities.UserPermission", b =>
                {
                    b.HasOne("Domain.Entities.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.ApplicationStatus", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("Domain.Entities.Borrower", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Borrowers");
                });
#pragma warning restore 612, 618
        }
    }
}
